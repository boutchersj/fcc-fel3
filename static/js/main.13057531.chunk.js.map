{"version":3,"sources":["logo.svg","sounds/clap.wav","sounds/clhat.wav","sounds/cymbal.wav","sounds/hfhat.wav","sounds/kick.wav","sounds/snare.wav","sounds/tom.wav","sounds/multicrash.wav","sounds/multicrashhi.wav","DrumMachine.js","DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DrumMachine","props","react_default","a","createElement","id","src","logo","className","alt","drumPads","banner","DrumPad","audioId","onClick","playButton","sound","type","sounds","clap","clhat","cymbal","hfhat","kick","snare","tom","multicrash","multicrashhi","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buttonsData","drumPadButtons","bind","assertThisInitialized","event","_event$target","target","lastChild","play","setState","_this2","map","button","src_DrumPad","letter","key","order","src_DrumMachine","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mZCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0QCiBzBC,MAff,SAAqBC,GAEjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACJH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,UAAU,WAAWC,IAAI,SAC/CP,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAeJ,EAAMS,UAC7BR,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAChBH,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,iBAA+BJ,EAAMU,OAArC,eCIWC,MAZf,SAAiBX,GAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWH,GAAIJ,EAAMY,QAASC,QAASb,EAAMc,YACvDd,EAAMI,GACPH,EAAAC,EAAAC,cAAA,SAAOI,UAAU,OAAOH,GAAIJ,EAAMI,GAAIC,IAAKL,EAAMe,MAAOC,KAAK,aAA7D,yMCQNC,EAAS,CAACC,IAAKC,IAAMC,IAAOC,IAAMC,IAAKC,IAAMC,IAAIC,IAAWC,KAyCnDC,cAtCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,YAAaC,IACb3B,OAAQ,qBAEVkB,EAAKd,WAAac,EAAKd,WAAWwB,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANPA,0EASFY,GAAO,IAAAC,EACQD,EAAME,OAAvBC,EADSF,EACTE,UAAWvC,EADFqC,EACErC,GAClBuC,EAAUC,OACVb,KAAKc,SAAS,CACZnC,OAAQN,qCAIH,IAAA0C,EAAAf,KAEDtB,EAAWsB,KAAKI,MAAMC,YAAYW,IAAI,SAAAC,GAAM,OAChD/C,EAAAC,EAAAC,cAAC8C,EAAD,CACE7C,GAAK4C,EAAOE,OACZC,IAAKH,EAAOE,OACZtC,QAAWoC,EAAOjC,MAClBA,MAASE,EAAO+B,EAAOI,OACvBtC,WAAcgC,EAAKhC,eAGvB,OACIb,EAAAC,EAAAC,cAACkD,EAAD,CACE/C,KAAMA,IACNG,SAAUA,EACVC,OAAQqB,KAAKI,MAAMzB,gBAjCX4C,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13057531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/clap.705b4374.wav\";","module.exports = __webpack_public_path__ + \"static/media/clhat.5b0428ba.wav\";","module.exports = __webpack_public_path__ + \"static/media/cymbal.cd5ad46a.wav\";","module.exports = __webpack_public_path__ + \"static/media/hfhat.9b755496.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.a88c34ee.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.d0c7e766.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.698d44d8.wav\";","module.exports = __webpack_public_path__ + \"static/media/multicrash.43381b1b.wav\";","module.exports = __webpack_public_path__ + \"static/media/multicrashhi.bdd77304.wav\";","import React from 'react'\r\n\r\nfunction DrumMachine(props) {\r\n\r\n    return (\r\n        <div id=\"drum-machine\">\r\n            <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>Steven's Drum Machine</h1>\r\n            <br></br>\r\n            <div id=\"button-grid\">{props.drumPads}</div>\r\n            <div id=\"display\">\r\n    <h3 id=\"banner\">Now playing: [{props.banner}]</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrumMachine ","import React from 'react'\r\n\r\n\r\nfunction DrumPad(props) {\r\n    \r\n    return (\r\n        <div className=\"drum-pad\" id={props.audioId} onClick={props.playButton}>\r\n            {props.id}\r\n            <audio className=\"clip\" id={props.id} src={props.sound} type=\"audio/wav\">\r\n                This browser does not support the audio tag\r\n            </audio>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrumPad","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport DrumMachine from './DrumMachine'\nimport {drumPadButtons} from './buttonsData.json'\nimport DrumPad from './DrumPad'\nimport clap from \"./sounds/clap.wav\"\nimport clhat from \"./sounds/clhat.wav\"\nimport cymbal from \"./sounds/cymbal.wav\"\nimport hfhat from \"./sounds/hfhat.wav\"\nimport kick from \"./sounds/kick.wav\"\nimport snare from \"./sounds/snare.wav\"\nimport tom from \"./sounds/tom.wav\"\nimport multicrash from \"./sounds/multicrash.wav\"\nimport multicrashhi from \"./sounds/multicrashhi.wav\"\n\nconst sounds = [clap,clhat,cymbal,hfhat,kick,snare,tom,multicrash,multicrashhi]\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      buttonsData: drumPadButtons,\n      banner: \"insert sound here\"\n    }\n    this.playButton = this.playButton.bind(this)\n  }\n\n  playButton(event) {\n    const {lastChild, id} = event.target\n    lastChild.play()\n    this.setState({\n      banner: id\n    })\n  }\n\n  render() {\n    \n    const drumPads = this.state.buttonsData.map(button => \n      <DrumPad \n        id= {button.letter}\n        key={button.letter}\n        audioId = {button.sound}\n        sound = {sounds[button.order]}\n        playButton = {this.playButton}\n      />\n      )\n    return (\n        <DrumMachine \n          logo={logo}\n          drumPads={drumPads}\n          banner={this.state.banner}\n        />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}